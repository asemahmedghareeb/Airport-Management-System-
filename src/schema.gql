# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PushDevice {
  id: ID!
  userId: String!
  playerId: String!
  deviceType: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  email: String!
  role: String!
  pushDevices: [PushDevice]
}

type Passenger {
  id: ID!
  passportNumber: String!
  name: String!
  nationality: String
  user: User!
  bookings: [Booking]
}

type Booking {
  id: ID!
  seatNumber: String!
  bookingDate: DateTime!
  passenger: Passenger!
  flight: Flight!
}

type Staff {
  id: ID!
  employeeId: String!
  name: String!
  role: String!
  user: User!
  airport: Airport!
  flightAssignments: [FlightStaff]
}

type FlightStaff {
  flightId: ID!
  staffId: ID!
  assignedRoleOnFlight: String
  flight: Flight!
  staff: Staff!
}

type Flight {
  id: ID!
  flightNumber: String!
  airline: String!
  departureTime: DateTime!
  arrivalTime: DateTime!
  availableSeats: Float!
  status: String!
  departureAirport: Airport!
  destinationAirport: Airport!
  bookings: [Booking]
  staffAssignments: [FlightStaff]
}

type Airport {
  id: ID!
  code: String!
  name: String!
  city: String
  departingFlights: [Flight!]
  arrivingFlights: [Flight!]
  staff: [Staff!]
}

type PaginatedAirportResponse {
  items: [Airport!]!
  totalCount: Int!
  totalPages: Int!
  currentPage: Int!
}

type PaginatedFlightResponse {
  items: [Flight!]!
  totalCount: Int!
  totalPages: Int!
  currentPage: Int!
  hasNextPage: Boolean!
}

type PaginatedStaff {
  items: [Staff!]!
  totalItems: Int!
  totalPages: Int!
}

type PaginatedBooking {
  items: [Booking!]!
  totalItems: Int!
  totalPages: Int!
}

type PaginatedPassenger {
  items: [Passenger!]!
  totalItems: Int!
  totalPages: Int!
}

type AuthResponse {
  accessToken: String!
  user: User!
}

type RegisterResponse {
  msg: String!
}

type Me {
  userId: String!
  role: String!
}

type NotificationResponse {
  id: String!
  recipients: Float!
}

type Query {
  me: Me!
  user(id: String!): User!
  airports(pagination: PaginationInput): PaginatedAirportResponse!
  airport(id: ID!): Airport!
  flights(pagination: PaginationInput, filter: FlightFilterInput): PaginatedFlightResponse!
  flight(id: ID!): Flight!
  staffMembers(pagination: PaginationInput, filter: StaffFilterInput): PaginatedStaff!
  staffMember(id: ID!): Staff!
  staffByAirport(airportId: ID!): [Staff!]!
  staffByFlight(flightId: ID!): [Staff!]!
  booking(id: ID!): Booking!
  bookings(pagination: PaginationInput): PaginatedBooking!
  myBookings(passengerId: ID!): [Booking!]!
  passengers(pagination: PaginationInput, filter: PassengerFilterInput): PaginatedPassenger!
  passenger(id: ID!): Passenger!
}

input PaginationInput {
  page: Int! = 1
  limit: Int! = 10
}

input FlightFilterInput {
  airline: String
  destination: String
  departureAfter: DateTime
  departureBefore: DateTime
}

input StaffFilterInput {
  name: String
  employeeId: String
  role: String
}

input PassengerFilterInput {
  name: String
  passportNumber: String
  nationality: String
}

type Mutation {
  registerPassenger(input: RegisterPassengerInput!): RegisterResponse!
  registerStaff(input: RegisterStaffInput!): RegisterResponse!
  login(input: LoginInput!): AuthResponse!
  createAirport(input: CreateAirportInput!): Airport!
  updateAirport(input: UpdateAirportInput!): Airport!
  removeAirport(id: ID!): Boolean!
  createFlight(input: CreateFlightInput!): Flight!
  updateFlight(input: UpdateFlightInput!): Flight!
  removeFlight(id: ID): Boolean!
  updateStaff(input: UpdateStaffInput!): Staff!
  deleteStaff(id: ID!): Staff!
  assignStaffToFlight(input: AssignStaffToFlightInput!): FlightStaff!

  """Creates a new booking, checks for seat duplication (Passenger only)"""
  bookFlight(input: BookFlightInput!): Booking!
  updateBooking(input: UpdateBookingInput!): Booking!
  deleteBooking(id: ID!): Booking!
  updatePassenger(input: UpdatePassengerInput!): Passenger!
  deletePassenger(id: ID!): Passenger!
  registerPushDevice(input: RegisterPushDeviceInput!): PushDevice!
  sendNotification(input: SendNotificationInput!): NotificationResponse!
}

input RegisterPassengerInput {
  email: String!
  password: String!
  name: String!
  passportNumber: String!
  nationality: String
}

input RegisterStaffInput {
  email: String!
  password: String!

  """User's top-level role: 'Admin' or 'Staff'"""
  userRole: String!
  employeeId: String!
  name: String!

  """Staff's job role: 'Pilot', 'Crew', 'Security', etc."""
  staffRole: String!
  airportId: ID!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateAirportInput {
  code: String!
  name: String!
  city: String
}

input UpdateAirportInput {
  code: String
  name: String
  city: String
  id: ID!
}

input CreateFlightInput {
  flightNumber: String!
  airline: String!
  departureTime: DateTime!
  arrivalTime: DateTime!
  availableSeats: Float!
  status: String!
  departureAirportId: ID!
  destinationAirportId: ID!
}

input UpdateFlightInput {
  flightNumber: String
  airline: String
  departureTime: DateTime
  arrivalTime: DateTime
  availableSeats: Float
  status: String
  departureAirportId: ID
  destinationAirportId: ID
  id: ID!
}

input UpdateStaffInput {
  id: ID!
  name: String
  role: String

  """New Airport ID if base assignment changes"""
  airportId: ID
}

input AssignStaffToFlightInput {
  staffId: ID!
  flightId: ID!
  assignedRoleOnFlight: String!
}

input BookFlightInput {
  passengerId: ID
  flightId: ID!
  seatNumber: String!
}

input UpdateBookingInput {
  id: ID!
  seatNumber: String
}

input UpdatePassengerInput {
  id: ID!
  name: String
  nationality: String
  passportNumber: String
}

input RegisterPushDeviceInput {
  playerId: String!
  deviceType: DeviceType! = WEB
}

"""The type of device/platform used for push notifications"""
enum DeviceType {
  WEB
  IOS
  ANDROID
}

input SendNotificationInput {
  title: String!
  message: String!
  playerIds: [String!]!
}